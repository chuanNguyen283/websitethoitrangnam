(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["package_name"] = factory();
	else
		root["package_name"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
  if (true) {
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports !== "undefined") {
    factory(module);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod);
    global.index = mod.exports;
  }
})(this, function (module) {
  "use strict";

  module.exports = {
    install: function install(Vue, _ref) {
      var websiteId = _ref.websiteId,
          disabled = _ref.disabled;

      if (!disabled && (!websiteId || websiteId.length === 0)) {
        console.warn("Please provide a Crisp Chat Website ID");
      } else {
        window.CRISP_WEBSITE_ID = websiteId;
      }

      var disabledLogger = function disabledLogger(method) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        console.log("Crisp Chat is disabled, you called:", { method: method, args: args });
      };

      if (disabled) {
        window.$crisp = disabledLogger;
      }

      var root = new Vue();
      root._script = document.createElement("script");
      root._script.type = "text/javascript";
      root._script.async = true;
      root._script.id = "crisp-chat";
      root._script.src = "https://client.crisp.chat/l.js";

      var isLoaded = false;

      root.load = function () {
        if (isLoaded) {
          return;
        }

        delete window.$crisp;

        var first = document.getElementsByTagName("script")[0];
        first.parentNode.insertBefore(root._script, first);

        root._script.onload = function (event) {
          isLoaded = true;

          root.$emit("loaded", event);
        };
      };

      if (!disabled) {
        root.load(websiteId);
      }

      root.reset = function () {
        return window.$crisp.reset();
      };
      root.do = function () {
        var _window$$crisp;

        return (_window$$crisp = window.$crisp).do.apply(_window$$crisp, arguments);
      };
      root.is = function () {
        var _window$$crisp2;

        return (_window$$crisp2 = window.$crisp).is.apply(_window$$crisp2, arguments);
      };
      root.get = function () {
        var _window$$crisp3;

        return (_window$$crisp3 = window.$crisp).get.apply(_window$$crisp3, arguments);
      };
      root.set = function () {
        var _window$$crisp4;

        return (_window$$crisp4 = window.$crisp).set.apply(_window$$crisp4, arguments);
      };
      root.config = function () {
        var _window$$crisp5;

        return (_window$$crisp5 = window.$crisp).config.apply(_window$$crisp5, arguments);
      };
      root.on = function () {
        var _window$$crisp6;

        return (_window$$crisp6 = window.$crisp).on.apply(_window$$crisp6, arguments);
      };
      root.off = function () {
        var _window$$crisp7;

        return (_window$$crisp7 = window.$crisp).off.apply(_window$$crisp7, arguments);
      };
      root.push = function () {
        var _window$$crisp8;

        return (_window$$crisp8 = window.$crisp).push.apply(_window$$crisp8, arguments);
      };

      Object.defineProperty(root, "$crisp", {
        get: function get() {
          return window.$crisp;
        }
      });

      Vue.prototype.$crisp = root;
    }
  };
});

/***/ })
/******/ ]);
});